/*
 * Author: Ethan Epstein
 * Email: ethanepstein@utexas.edu
 * Date: Spring 2020
 * License: Public Domain
*/

// Adafruit SSD1306 - Version: 2.2.1
#include <Adafruit_SSD1306.h>
#include <splash.h>

// Adafruit GFX Library - Version: Latest 
#include <Adafruit_GFX.h>
#include <Adafruit_SPITFT.h>
#include <Adafruit_SPITFT_Macros.h>
#include <gfxfont.h>

#include <string.h>

#define UP 0
#define DOWN 1
#define OKAY 2
#define FORCE A0

#ifndef GRIPTEST_H
#define GRIPTEST_H
 
class GripTest
{
  
  enum Gender{
    MALE,
    FEMALE
  };
  
private:

  int age;
  Gender gender;
  
  int forceMeasurement [12];
  
  /**
   * handles displaying and user input of age. Returns age.
  **/
  int inputAge(int ageGuess);
  
  /**
   * handles displaying and user input confirming age. Returns if age is correct.
  **/
  bool confirmAge(int ageToCheck);
  
  /**
   * handles displaying and user input of gender. Returns gender.
  **/
  int inputGender();
  
  /**
   * handles displaying and user input confirming gender. Returns if gender is correct.
  **/
  bool confirmGender(Gender genderToCheck);
  
  /**
   * returns string form of gender.
  **/
  static String genderToString(Gender gender){
    switch(gender){
      case MALE: return "MALE";
      case FEMALE: return "FEMALE";
   }
  }
 
public:

  /**
   * creates new GripTest opbject, and fills in age and gender via user prompt
  **/
  GripTest();
  
  /**
   * prompts on the display for the user to grip the handles for 3 seconds. 
   * Over this time span, the force data will be read every 0.25 seconds, and stored in instance attributes. 
   * The formula to determine force shall be calibrated to accurately represent the output of the specific load cells used, but an example formula may be:  
   * Force = analogRead() / 220, assuming the voltage of the load cells scales linearly with force, and that the load cells reach maximum voltage at 220lbs.
  **/
  void test();
  
    /**
   * displays the mean force exerted from the test, and displays whether the results is consistent with the averages given the age and gender of the user. 
  **/
  void displayResults();

};

const unsigned char testImage[] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x03, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x02, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x04, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x04, 0x07, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0c, 0x70, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0b, 0xb8, 0x19, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0c, 0x1e, 0x10, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x08, 0x13, 0x80, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x30, 0x00, 0x40, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xe0, 0x00, 0x70, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x01, 0x80, 0x40, 0x10, 0xcc, 0x3c, 0x07, 0xe0, 0x40, 0x43, 0xf8, 0xfe, 0x7f, 0x8f, 0xe0, 0x00, 
0x01, 0x00, 0x40, 0x11, 0x84, 0x42, 0x0c, 0x30, 0x40, 0x42, 0x00, 0x80, 0x01, 0x88, 0x00, 0x00, 
0x02, 0x00, 0x60, 0x30, 0x04, 0xc0, 0x18, 0x18, 0x40, 0x42, 0x00, 0x80, 0x03, 0x08, 0x00, 0x00, 
0x02, 0x00, 0x7f, 0xe0, 0x04, 0xc0, 0x10, 0x08, 0x40, 0x42, 0x00, 0x80, 0x03, 0x08, 0x00, 0x00, 
0x02, 0x00, 0x3f, 0xc0, 0x0c, 0xc0, 0x30, 0x0c, 0x40, 0x42, 0x00, 0x80, 0x06, 0x08, 0x00, 0x00, 
0x02, 0x00, 0x1f, 0xf8, 0x18, 0x70, 0x30, 0x0c, 0x40, 0x42, 0x00, 0x80, 0x04, 0x08, 0x00, 0x00, 
0x01, 0x00, 0x0c, 0x9e, 0x38, 0x1c, 0x30, 0x0c, 0x40, 0x43, 0xf0, 0xfc, 0x0c, 0x0f, 0xc0, 0x00, 
0x01, 0x80, 0x0c, 0x87, 0xe8, 0x07, 0x30, 0x0c, 0x40, 0x42, 0x00, 0x80, 0x18, 0x08, 0x00, 0x00, 
0x01, 0xe0, 0x0c, 0x40, 0x08, 0x03, 0x30, 0x08, 0x40, 0x42, 0x00, 0x80, 0x18, 0x08, 0x00, 0x00, 
0x01, 0xe0, 0x0c, 0x40, 0x18, 0x03, 0x30, 0x08, 0x40, 0x42, 0x00, 0x80, 0x30, 0x08, 0x00, 0x00, 
0x00, 0xf0, 0x00, 0x40, 0x38, 0x03, 0x18, 0x18, 0x60, 0xc2, 0x00, 0x80, 0x20, 0x08, 0x00, 0x00, 
0x00, 0xf0, 0x02, 0x20, 0x30, 0x82, 0x0c, 0x30, 0x31, 0x82, 0x00, 0x80, 0x60, 0x08, 0x00, 0x00, 
0x00, 0x78, 0x00, 0x00, 0x70, 0x7c, 0x07, 0xdc, 0x1f, 0x03, 0xf8, 0xfe, 0x7f, 0x8f, 0xe0, 0x00, 
0x00, 0x78, 0x04, 0x00, 0xe0, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x7c, 0x08, 0x01, 0xc0, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x7e, 0x10, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x3f, 0xe0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x3c, 0x40, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x3b, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x70, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x70, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x60, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x60, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x20, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x41, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const double standardsM[12][2] = {
  {99.6, 135.6},
  {97.7, 140.3},
  {97.2, 135.6},
  {97.0, 138.1},
  {103.9, 135.0},
  {93.7, 128.5},
  {93.7, 125.4},
  {80.9, 113.4},
  {81.1, 103.0},
  {78.1, 105.7},
  {70.5, 98.0},
  {55.2, 68.4}
};

const double standardsW[12][2] = {
  {58.9, 75.8},
  {65.1, 83.9},
  {63.8, 85.1},
  {63.0, 83.3},
  {61.7, 82.9},
  {63.7, 85.9},
  {58.8, 77.5},
  {58.1, 74.0},
  {48.9, 65.3},
  {49.6, 63.4},
  {45.6, 61.3},
  {35.3, 43.9}
};
 
#endif